"""
ุณูุฑูุจุช ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ
ููููุฏ ุฎุทุท ุงูุชูุงุฑูู

ุชุดุบูู ุงูุณูุฑูุจุช: python create_database.py
"""

import sqlite3
import json
from datetime import datetime

DATABASE_NAME = 'workout_generator.db'

def create_database():
    """ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงูุฌุฏุงูู"""
    print("๐ง ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช...")
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    # ุฌุฏูู ุงููุณุชุฎุฏููู
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            age INTEGER NOT NULL,
            weight REAL NOT NULL,
            height REAL NOT NULL,
            goal TEXT NOT NULL CHECK (goal IN ('lose_weight', 'muscle_gain', 'weight_gain')),
            level TEXT NOT NULL CHECK (level IN ('beginner', 'intermediate', 'advanced')),
            days_per_week INTEGER NOT NULL,
            equipment TEXT NOT NULL,
            health_issues TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # ุฌุฏูู ุงูุชูุงุฑูู
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS exercises (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            muscle_group TEXT NOT NULL,
            difficulty TEXT NOT NULL CHECK (difficulty IN ('beginner', 'intermediate', 'advanced')),
            equipment_needed TEXT NOT NULL,
            video_url TEXT NOT NULL,
            tips TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    print("โ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงูุฌุฏุงูู ุจูุฌุงุญ")

def insert_sample_exercises():
    """ุฅุฏุฑุงุฌ ุชูุงุฑูู ุชุฌุฑูุจูุฉ ุดุงููุฉ"""
    print("๐ช ุฅุฏุฑุงุฌ ุงูุชูุงุฑูู ุงูุชุฌุฑูุจูุฉ...")
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    # ุชูุงุฑูู ุดุงููุฉ ูุฌููุน ุงููุฌููุนุงุช ุงูุนุถููุฉ
    exercises_data = [
        # ุชูุงุฑูู ุงูุตุฏุฑ
        ('ุชูุฑูู ุงูุถุบุท', 'ุตุฏุฑ', 'beginner', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=IODxDxX7oi4', 'ุญุงูุธ ุนูู ุงุณุชูุงูุฉ ุงูุฌุณู ูู ุงูุฑุฃุณ ุฅูู ุงููุฏูููุ ุงูุฒู ุจุจุทุก ุญุชู ููุงูุณ ุงูุตุฏุฑ ุงูุฃุฑุถ ุชูุฑูุจุงู'),
        ('ุถุบุท ุงูุฏูุจู ุนูู ุงูุจูุด', 'ุตุฏุฑ', 'intermediate', 'ุฏูุจูุ ุจูุด', 'https://youtube.com/watch?v=QcY11Uht6s0', 'ุงุฎูุถ ุงูุฏูุจู ุจุจุทุก ุญุชู ูุณุชูู ุงูุตุฏุฑุ ุซู ุงุฏูุน ูุฃุนูู ูุน ุงูุฒููุฑ'),
        ('ุถุบุท ุงูุจุงุฑ ุนูู ุงูุจูุด', 'ุตุฏุฑ', 'intermediate', 'ุจุงุฑุ ุจูุด', 'https://youtube.com/watch?v=rT7DgCr-3pg', 'ุงูุณู ุงูุจุงุฑ ุจูุจุถุฉ ุฃูุณุน ูู ุงููุชูููุ ุงุฎูุถ ุงูุจุงุฑ ุฅูู ุงูุตุฏุฑ ุซู ุงุฏูุน ูุฃุนูู'),
        ('ุชูุฑูู ุงูุถุบุท ุงููุงุฆู', 'ุตุฏุฑ', 'advanced', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=cfns4B1h_Ys', 'ุถุน ุงููุฏููู ุนูู ุณุทุญ ูุฑุชูุนุ ููุฐ ุชูุฑูู ุงูุถุบุท ุงูุนุงุฏู'),
        
        # ุชูุงุฑูู ุงูุธูุฑ
        ('ุงูุนููุฉ', 'ุธูุฑ', 'intermediate', 'ุจุงุฑ ุนููุฉ', 'https://youtube.com/watch?v=eGo4IYlbE5g', 'ุงูุณู ุงูุจุงุฑ ุจูุจุถุฉ ุฃูุณุน ูู ุงููุชูููุ ุงุณุญุจ ุงูุฌุณู ูุฃุนูู ุญุชู ูุชุฌุงูุฒ ุงูุฐูู ุงูุจุงุฑ'),
        ('ุชูุฑูู ุงูุณูุจุฑูุงู', 'ุธูุฑ', 'beginner', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=cc6UVRS7PW4', 'ุงุณุชูู ุนูู ุงูุจุทูุ ุงุฑูุน ุงูุตุฏุฑ ูุงูุณุงููู ุนู ุงูุฃุฑุถ ูู ููุณ ุงูููุช'),
        ('ุณุญุจ ุงูุฏูุจู ุจุฐุฑุงุน ูุงุญุฏุฉ', 'ุธูุฑ', 'intermediate', 'ุฏูุจูุ ุจูุด', 'https://youtube.com/watch?v=roCP6wCXPqo', 'ุถุน ุฑูุจุฉ ูุงุญุฏุฉ ุนูู ุงูุจูุดุ ุงุณุญุจ ุงูุฏูุจู ุฅูู ุฌุงูุจ ุงูุฌุณู'),
        ('ุงูุฑูุนุฉ ุงูููุชุฉ', 'ุธูุฑ', 'advanced', 'ุจุงุฑ', 'https://youtube.com/watch?v=ytGaGIn3SjE', 'ุญุงูุธ ุนูู ุงุณุชูุงูุฉ ุงูุธูุฑุ ุงุฑูุน ุงูุจุงุฑ ูู ุงูุฃุฑุถ ุจููุฉ ุงูุณุงููู ูุงูุธูุฑ'),
        
        # ุชูุงุฑูู ุงูุณุงููู
        ('ุงูุณููุงุช', 'ุณุงููู', 'beginner', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=Dy28eq2PjcM', 'ุงูุฒู ุญุชู ุชุตุจุญ ุงููุฎุฐุงู ููุงุฒูุชุงู ููุฃุฑุถุ ุญุงูุธ ุนูู ุงุณุชูุงูุฉ ุงูุธูุฑ'),
        ('ุงูุณููุงุช ุจุงูุฏูุจู', 'ุณุงููู', 'intermediate', 'ุฏูุจู', 'https://youtube.com/watch?v=Uv_DKDl7EjA', 'ุงูุณู ุงูุฏูุจู ุฃูุงู ุงูุตุฏุฑุ ููุฐ ุงูุณููุงุช ุงูุนุงุฏู'),
        ('ุงูุทุนูุงุช', 'ุณุงููู', 'intermediate', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=QOVaHwm-Q6U', 'ุงุชุฎุฐ ุฎุทูุฉ ูุจูุฑุฉ ููุฃูุงูุ ุงูุฒู ุญุชู ุชูุงูุณ ุงูุฑูุจุฉ ุงูุฎูููุฉ ุงูุฃุฑุถ ุชูุฑูุจุงู'),
        ('ุงูุณููุงุช ุจุงูุจุงุฑ', 'ุณุงููู', 'advanced', 'ุจุงุฑ', 'https://youtube.com/watch?v=ultWZbUMPL8', 'ุถุน ุงูุจุงุฑ ุนูู ุงููุชูููุ ููุฐ ุงูุณููุงุช ูุน ุงูุญูุงุธ ุนูู ุชูุงุฒู ุงูุฌุณู'),
        
        # ุชูุงุฑูู ุงูุฃูุชุงู
        ('ุงูุถุบุท ุงูุนุณูุฑู ุจุงูุฏูุจู', 'ุฃูุชุงู', 'intermediate', 'ุฏูุจู', 'https://youtube.com/watch?v=qEwKCR5JCog', 'ุงุฏูุน ุงูุฏูุจู ูู ูุณุชูู ุงููุชู ุฅูู ุฃุนูู ุงูุฑุฃุณ'),
        ('ุฑูุน ุฌุงูุจู ุจุงูุฏูุจู', 'ุฃูุชุงู', 'beginner', 'ุฏูุจู', 'https://youtube.com/watch?v=3VcKaXpzqRo', 'ุงุฑูุน ุงูุฏูุจู ูู ุฌุงูุจ ุงูุฌุณู ุญุชู ูุณุชูู ุงููุชู'),
        ('ุฑูุน ุฃูุงูู ุจุงูุฏูุจู', 'ุฃูุชุงู', 'beginner', 'ุฏูุจู', 'https://youtube.com/watch?v=qzaKUHI8Zt8', 'ุงุฑูุน ุงูุฏูุจู ูู ุฃูุงู ุงูุฌุณู ุญุชู ูุณุชูู ุงููุชู'),
        ('ุงูุถุบุท ุงูุนุณูุฑู ุจุงูุจุงุฑ', 'ุฃูุชุงู', 'advanced', 'ุจุงุฑ', 'https://youtube.com/watch?v=2yjwXTZQDDI', 'ุงุฏูุน ุงูุจุงุฑ ูู ูุณุชูู ุงููุชู ุฅูู ุฃุนูู ุงูุฑุฃุณ ูุน ุงูุญูุงุธ ุนูู ุงุณุชูุงูุฉ ุงูุฌุณู'),
        
        # ุชูุงุฑูู ุงูุฐุฑุงุนูู
        ('ุชูุฑูู ุงูุนุถูุฉ ุฐุงุช ุงูุฑุฃุณูู ุจุงูุฏูุจู', 'ุฐุฑุงุนูู', 'beginner', 'ุฏูุจู', 'https://youtube.com/watch?v=ykJmrZ5v0Oo', 'ุงุฑูุน ุงูุฏูุจู ูู ูุถุน ุงูุฐุฑุงุน ุงููุณุชููู ุฅูู ุงููุชู'),
        ('ุชูุฑูู ุงูุชุฑุงูุณุจุณ ุจุงูุฏูุจู', 'ุฐุฑุงุนูู', 'intermediate', 'ุฏูุจู', 'https://youtube.com/watch?v=YbX7Wd8jQ-Q', 'ุงูุณู ุงูุฏูุจู ุจููุชุง ุงููุฏูู ุฎูู ุงูุฑุฃุณุ ุงุฑูุน ูุฃุฎูุถ ุงูุฏูุจู'),
        ('ุชูุฑูู ุงูุถุบุท ุงูุถูู', 'ุฐุฑุงุนูู', 'intermediate', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=cfns4B1h_Ys', 'ููุฐ ุชูุฑูู ุงูุถุบุท ูุน ูุถุน ุงููุฏูู ูุฑูุจุงู ูู ุจุนุถููุง'),
        ('ุชูุฑูู ุงูุนุถูุฉ ุฐุงุช ุงูุฑุฃุณูู ุจุงูุจุงุฑ', 'ุฐุฑุงุนูู', 'advanced', 'ุจุงุฑ', 'https://youtube.com/watch?v=kwG2ipFRgfo', 'ุงูุณู ุงูุจุงุฑ ุจูุจุถุฉ ุณูููุฉุ ุงุฑูุน ุงูุจุงุฑ ุฅูู ุงูุตุฏุฑ'),
        
        # ุชูุงุฑูู ุงูุจุทู ูุงูุฌุฐุน
        ('ุชูุฑูู ุงูุจุทู ุงูุนุงุฏู', 'ุจุทู', 'beginner', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=1fbU_MkV7NE', 'ุงุณุชูู ุนูู ุงูุธูุฑุ ุงุฑูุน ุงูุฌุฐุน ุงูุนููู ูุญู ุงูุฑูุจุชูู'),
        ('ุชูุฑูู ุงูุจูุงูู', 'ุจุทู', 'beginner', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=ASdvN_XEl_c', 'ุญุงูุธ ุนูู ูุถุน ุงูููุญ ุงูุฎุดุจู ูุฃุทูู ูุชุฑุฉ ููููุฉ'),
        ('ุชูุฑูู ุงูุฏุฑุงุฌุฉ', 'ุจุทู', 'intermediate', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=9FGilxCbdz8', 'ุงุณุชูู ุนูู ุงูุธูุฑุ ุญุฑู ุงูุณุงููู ูุฃูู ุชููุฏ ุฏุฑุงุฌุฉ'),
        ('ุชูุฑูู ุฑูุน ุงูุณุงููู', 'ุจุทู', 'intermediate', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=JB2oyawG9KI', 'ุงุณุชูู ุนูู ุงูุธูุฑุ ุงุฑูุน ุงูุณุงููู ุงููุณุชูููุชูู ุฅูู ุฃุนูู'),
        
        # ุชูุงุฑูู ูุงูู ุงูุฌุณู
        ('ุงูุจูุฑุจู', 'ูุงูู ุงูุฌุณู', 'advanced', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=auBLPXO8Fww', 'ุงูุฒู ุฅูู ูุถุน ุงูุณููุงุชุ ุงููุฒ ุฅูู ูุถุน ุงูุจูุงููุ ููุฐ ุถุบุทุฉุ ุงููุฒ ููุฎูู ุซู ูุฃุนูู'),
        ('ุชูุฑูู ุงูุฌุจู ุงููุชุณูู', 'ูุงูู ุงูุฌุณู', 'intermediate', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=nmwgirgXLYM', 'ูู ูุถุน ุงูุจูุงููุ ุญุฑู ุงูุฑูุจุชูู ุจุงูุชูุงูุจ ูุญู ุงูุตุฏุฑ ุจุณุฑุนุฉ'),
        ('ุงูููุฒ ูุน ูุชุญ ุงูุณุงููู', 'ูุงูู ุงูุฌุณู', 'beginner', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=c4DAnQ6DtF8', 'ุงููุฒ ูุน ูุชุญ ุงูุณุงููู ูุฑูุน ุงูุฐุฑุงุนููุ ุซู ุงูุนูุฏุฉ ูููุถุน ุงูุฃุตูู'),
        ('ุชูุฑูู ุงูููุชู ุจูู ุณูููุบ', 'ูุงูู ุงูุฌุณู', 'intermediate', 'ููุชู ุจูู', 'https://youtube.com/watch?v=YSxHifyI6s8', 'ุฃุฑุฌุญ ุงูููุชู ุจูู ูู ุจูู ุงูุณุงููู ุฅูู ูุณุชูู ุงููุชู'),
        
        # ุชูุงุฑูู ุงููุงุฑุฏูู
        ('ุงูุฌุฑู ูู ุงูููุงู', 'ูุงุฑุฏูู', 'beginner', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=8opcQdC-V-U', 'ุงุฌุฑ ูู ุงูููุงู ูุน ุฑูุน ุงูุฑูุจุชูู ุนุงููุงู'),
        ('ุชูุฑูู ุงูุตูุฏูู', 'ูุงุฑุฏูู', 'intermediate', 'ุตูุฏูู ุฃู ุฏุฑุฌ', 'https://youtube.com/watch?v=5MYiM_8_-5E', 'ุงุตุนุฏ ูุงูุฒู ูู ุงูุตูุฏูู ุจุงูุชูุงูุจ'),
        ('ุชูุฑูู ุงูุญุจู', 'ูุงุฑุฏูู', 'intermediate', 'ุญุจู ุงูููุฒ', 'https://youtube.com/watch?v=1BZM2Vre5oc', 'ุงููุฒ ุจุงูุญุจู ุจุฅููุงุน ุซุงุจุช'),
        ('ุชูุฑูู HIIT', 'ูุงุฑุฏูู', 'advanced', 'ูุฒู ุงูุฌุณู', 'https://youtube.com/watch?v=ml6cT4AZdqI', 'ุชูุงูุจ ุจูู ุชูุงุฑูู ุนุงููุฉ ุงููุซุงูุฉ ููุชุฑุงุช ุฑุงุญุฉ ูุตูุฑุฉ'),
    ]
    
    cursor.executemany('''
        INSERT INTO exercises (name, muscle_group, difficulty, equipment_needed, video_url, tips)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', exercises_data)
    
    conn.commit()
    conn.close()
    print(f"โ ุชู ุฅุฏุฑุงุฌ {len(exercises_data)} ุชูุฑูู ุจูุฌุงุญ")

def insert_sample_users():
    """ุฅุฏุฑุงุฌ ูุณุชุฎุฏููู ุชุฌุฑูุจููู"""
    print("๐ฅ ุฅุฏุฑุงุฌ ุงููุณุชุฎุฏููู ุงูุชุฌุฑูุจููู...")
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    users_data = [
        ('ุฃุญูุฏ ูุญูุฏ', 25, 75.5, 175.0, 'muscle_gain', 'intermediate', 4, 'ุฏูุจูุ ุจุงุฑ', ''),
        ('ุณุงุฑุฉ ุฃุญูุฏ', 28, 65.0, 165.0, 'lose_weight', 'beginner', 3, 'ูุฒู ุงูุฌุณู', ''),
        ('ูุญูุฏ ุนูู', 30, 80.0, 180.0, 'lose_weight', 'intermediate', 5, 'ุฃุฌูุฒุฉ ุงูุฌูู', 'ุฃูู ูู ุงูุฑูุจุฉ'),
        ('ูุงุทูุฉ ูุญููุฏ', 22, 55.0, 160.0, 'muscle_gain', 'beginner', 4, 'ุฏูุจู', ''),
        ('ุฎุงูุฏ ุญุณู', 35, 90.0, 185.0, 'lose_weight', 'advanced', 6, 'ุฌููุน ุงููุนุฏุงุช', ''),
        ('ููุฑ ุงูุฏูู', 26, 70.0, 170.0, 'weight_gain', 'intermediate', 3, 'ุจุงุฑุ ุฏูุจู', 'ุฃูู ูู ุงูุธูุฑ'),
    ]
    
    cursor.executemany('''
        INSERT INTO users (name, age, weight, height, goal, level, days_per_week, equipment, health_issues)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', users_data)
    
    conn.commit()
    conn.close()
    print(f"โ ุชู ุฅุฏุฑุงุฌ {len(users_data)} ูุณุชุฎุฏู ุชุฌุฑูุจู ุจูุฌุงุญ")

def display_database_info():
    """ุนุฑุถ ูุนูููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    print("\n๐ ูุนูููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช:")
    
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    # ุนุฏุฏ ุงููุณุชุฎุฏููู
    cursor.execute('SELECT COUNT(*) FROM users')
    users_count = cursor.fetchone()[0]
    print(f"๐ฅ ุนุฏุฏ ุงููุณุชุฎุฏููู: {users_count}")
    
    # ุนุฏุฏ ุงูุชูุงุฑูู
    cursor.execute('SELECT COUNT(*) FROM exercises')
    exercises_count = cursor.fetchone()[0]
    print(f"๐ช ุนุฏุฏ ุงูุชูุงุฑูู: {exercises_count}")
    
    # ุชูุฒูุน ุงูุชูุงุฑูู ุญุณุจ ุงููุฌููุนุฉ ุงูุนุถููุฉ
    cursor.execute('SELECT muscle_group, COUNT(*) FROM exercises GROUP BY muscle_group')
    muscle_groups = cursor.fetchall()
    print("\n๐ฏ ุชูุฒูุน ุงูุชูุงุฑูู ุญุณุจ ุงููุฌููุนุฉ ุงูุนุถููุฉ:")
    for group, count in muscle_groups:
        print(f"   {group}: {count} ุชูุฑูู")
    
    # ุชูุฒูุน ุงูุชูุงุฑูู ุญุณุจ ูุณุชูู ุงูุตุนูุจุฉ
    cursor.execute('SELECT difficulty, COUNT(*) FROM exercises GROUP BY difficulty')
    difficulties = cursor.fetchall()
    print("\n๐ ุชูุฒูุน ุงูุชูุงุฑูู ุญุณุจ ูุณุชูู ุงูุตุนูุจุฉ:")
    for difficulty, count in difficulties:
        print(f"   {difficulty}: {count} ุชูุฑูู")
    
    conn.close()

def create_api_test_file():
    """ุฅูุดุงุก ููู ุงุฎุชุจุงุฑ ููู API"""
    print("๐งช ุฅูุดุงุก ููู ุงุฎุชุจุงุฑ API...")
    
    test_content = '''#!/usr/bin/env python3
"""
ููู ุงุฎุชุจุงุฑ API ูููุฏ ุฎุทุท ุงูุชูุงุฑูู
ุชุดุบูู ุงูุงุฎุชุจุงุฑุงุช: python test_api.py
"""

import requests
import json

BASE_URL = 'http://localhost:5000/api'

def test_health_check():
    """ุงุฎุชุจุงุฑ ูุญุต ุญุงูุฉ API"""
    print("๐ ุงุฎุชุจุงุฑ ูุญุต ุญุงูุฉ API...")
    response = requests.get(f'{BASE_URL}/health')
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print()

def test_add_user():
    """ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ูุณุชุฎุฏู ุฌุฏูุฏ"""
    print("๐ค ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ูุณุชุฎุฏู ุฌุฏูุฏ...")
    user_data = {
        "name": "ุงุฎุชุจุงุฑ ุงููุณุชุฎุฏู",
        "age": 25,
        "weight": 70.0,
        "height": 175.0,
        "goal": "muscle_gain",
        "level": "beginner",
        "days_per_week": 3,
        "equipment": "ุฏูุจู",
        "health_issues": ""
    }
    
    response = requests.post(f'{BASE_URL}/users', json=user_data)
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print()

def test_add_exercise():
    """ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ุชูุฑูู ุฌุฏูุฏ"""
    print("๐ช ุงุฎุชุจุงุฑ ุฅุถุงูุฉ ุชูุฑูู ุฌุฏูุฏ...")
    exercise_data = {
        "name": "ุชูุฑูู ุงุฎุชุจุงุฑ",
        "muscle_group": "ุตุฏุฑ",
        "difficulty": "beginner",
        "equipment_needed": "ูุฒู ุงูุฌุณู",
        "video_url": "https://youtube.com/watch?v=test",
        "tips": "ูุตุงุฆุญ ุชูุฑูู ุงูุงุฎุชุจุงุฑ"
    }
    
    response = requests.post(f'{BASE_URL}/exercises', json=exercise_data)
    print(f"Status: {response.status_code}")
    print(f"Response: {response.json()}")
    print()

def test_generate_workout_plan():
    """ุงุฎุชุจุงุฑ ุชูููุฏ ุฎุทุฉ ุชูุงุฑูู"""
    print("๐ ุงุฎุชุจุงุฑ ุชูููุฏ ุฎุทุฉ ุชูุงุฑูู...")
    plan_data = {
        "name": "ูุณุชุฎุฏู ุงูุงุฎุชุจุงุฑ",
        "age": 28,
        "weight": 65.0,
        "height": 165.0,
        "goal": "lose_weight",
        "level": "beginner",
        "days_per_week": 3,
        "equipment": "ูุฒู ุงูุฌุณู",
        "health_issues": ""
    }
    
    response = requests.post(f'{BASE_URL}/generate-workout-plan', json=plan_data)
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        result = response.json()
        print(f"Goal: {result['goal']}")
        print(f"Plan days: {len(result['plan'])}")
        print(f"General tips: {len(result['general_tips'])}")
    else:
        print(f"Error: {response.json()}")
    print()

def test_get_exercises():
    """ุงุฎุชุจุงุฑ ุฌูุจ ุงูุชูุงุฑูู"""
    print("๐ ุงุฎุชุจุงุฑ ุฌูุจ ุงูุชูุงุฑูู...")
    response = requests.get(f'{BASE_URL}/exercises')
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        result = response.json()
        print(f"Total exercises: {result['total']}")
    else:
        print(f"Error: {response.json()}")
    print()

def test_get_users():
    """ุงุฎุชุจุงุฑ ุฌูุจ ุงููุณุชุฎุฏููู"""
    print("๐ฅ ุงุฎุชุจุงุฑ ุฌูุจ ุงููุณุชุฎุฏููู...")
    response = requests.get(f'{BASE_URL}/users')
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        result = response.json()
        print(f"Total users: {result['total']}")
    else:
        print(f"Error: {response.json()}")
    print()

if __name__ == '__main__':
    print("๐ ุจุฏุก ุงุฎุชุจุงุฑุงุช API ูููุฏ ุฎุทุท ุงูุชูุงุฑูู\\n")
    
    try:
        test_health_check()
        test_add_user()
        test_add_exercise()
        test_generate_workout_plan()
        test_get_exercises()
        test_get_users()
        
        print("โ ุชู ุฅููุงุก ุฌููุน ุงูุงุฎุชุจุงุฑุงุช")
        
    except requests.exceptions.ConnectionError:
        print("โ ุฎุทุฃ: ูุง ูููู ุงูุงุชุตุงู ุจุงูุฎุงุฏู")
        print("ุชุฃูุฏ ูู ุชุดุบูู ุงูุฎุงุฏู ุฃููุงู: python workout_api.py")
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ: {e}")
'''
    
    with open('test_api.py', 'w', encoding='utf-8') as f:
        f.write(test_content)
    
    print("โ ุชู ุฅูุดุงุก ููู test_api.py")

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    print("๐ ุจุฏุก ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ููููุฏ ุฎุทุท ุงูุชูุงุฑูู")
    print("=" * 50)
    
    # ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช
    create_database()
    
    # ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ
    insert_sample_exercises()
    insert_sample_users()
    
    # ุนุฑุถ ูุนูููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
    display_database_info()
    
    # ุฅูุดุงุก ููู ุงุฎุชุจุงุฑ API
    create_api_test_file()
    
    print("\n" + "=" * 50)
    print("โ ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!")
    print(f"๐ ุงุณู ูุงุนุฏุฉ ุงูุจูุงูุงุช: {DATABASE_NAME}")
    print("๐ ููููู ุงูุขู ุชุดุบูู API: python workout_api.py")
    print("๐งช ูุงุฎุชุจุงุฑ API: python test_api.py")

if __name__ == '__main__':
    main()